#!/usr/bin/env python3 

# Import modules for CGI handling 
import cgi, time
import sys,os,json,ast,requests
from vecml import vecml
import numpy as np
from contextlib import redirect_stdout
import io

# secrets that we do not want to share
fn = os.environ["HOME"] + '/.secrets.json'
assert 'VECML_API_KEY' in os.environ or os.path.exists(fn), 'VECML_API_KEY is required; see README for https://github.com/kwchurch/RAG'

secrets = {}
if os.path.exists(fn):
    with open(fn, 'r') as fd:
        secrets = ast.literal_eval(fd.read().rstrip())

def s2_apikey():
    if 'S2_API_KEYS' in secrets: 
        return secrets['S2_API_KEYS'][0]
    return os.environ['S2_API_KEY']

def vecml_apikey():
    if 'VECML_API_KEYS' in secrets:
        return secrets['VECML_API_KEYS'][0]
    return os.environ['VECML_API_KEY']

def my_get(rec, keys):
    if rec is None: return None
    if len(keys) == 0: return None
    if keys[0] in rec:
        if not keys[0] in rec: return None
        v = rec[keys[0]]
        if len(keys) == 1: return v
        else: return my_get(v, keys[1:])
    return None

RAG_filenames = 0
def get_RAG_filename(suffix='html'):
    global RAG_filenames
    RAG_filenames += 1
    fn = 'tmp/compare_and_contrast.%d.%05d.%s' % (os.getpid(), RAG_filenames, suffix)
    return fn

def id_ify(s):
    if s is None: return s
    if len(s) == 40: return s
    # s = s.replace('%3A', ':')
    for prefix in ['CorpusId:', 'PMID:', 'ACL:', 'arXiv:', 'DBLP:', 'MAG:']:
        if s.startswith(prefix):
            return s
    if '/' in s: return s
    return 'CorpusId:' + s

def convert_id(id, new_type):
    if id.startswith(new_type):
        return id[len(new_type)+1:]
    else:
        my_api = 'https://api.semanticscholar.org/graph/v1/paper/'
        cmd = my_api + str(id) + '/?fields=externalIds'
        j = requests.get(cmd, headers={"x-api-key": apikey()}).json()
        if 'externalIds' in j:
            return j['externalIds'][new_type]

def convert_ids(ids, new_type):
    return [convert_id(i, new_type) for i in ids ]

print('Access-Control-Allow-Origin: *\r\nContent-type: application/json\r\n\r\n')

res = []
scores = []

form = cgi.FieldStorage() 

required_arguments = ['text1', 'text2']
optional_arguments = ['help']

def unsupported_arguments():
    res = []
    for k in form.keys():
        if k in required_arguments: continue
        if k in optional_arguments: continue
        res.append(k)
    return res

def documentation():
    inputs = {}
    j = {'inputs': inputs}
    for k in form.keys():
        inputs[k] = form.getvalue(k)

    err = {'missing_required_arguments' : [k for k in required_arguments if form.getvalue(k) is None],
         'unsupported_arguments' : unsupported_arguments()}
    if len(err['missing_required_arguments']) > 0 or len(err['unsupported_arguments']) > 0:
        j['errors'] = err
        print(json.dumps(j))
        sys.exit()

    return j

def usage():
    j = documentation()
    print(json.dumps(j))
    sys.exit()

if not form.getvalue('help') is None:
    usage()

def create_multiple_paper_details_files(j, texts):
    j['texts'] = texts
    files = []
    for i,paper in enumerate(texts):
        fn = get_RAG_filename('html')
        files.append(fn)
        with open(fn, 'w') as fd:
            # print("Content-type:text/html\r\n\r\n", file=fd)
            print('<html>', file=fd)
            print("<head>", file=fd)
            print("</head>", file=fd)
            print("<body>", file=fd)

            print('<h2>Title: Text %d</h2>' %(i), file=fd)

            print(paper, file=fd)
            print('</body></html>', file=fd)
    return files

def chat_about_paper(name, prompt):
    try:
        return vecml.chat(name, prompt)
    except Exception as e:
        return 'VecML error: ' + str(e)

def RAG_feature(j, texts):

    times = [time.time()]
    times_descriptions = []

    for i,txt in enumerate(texts):
        j[i] = {'text' : txt }

    files = create_multiple_paper_details_files(j, texts)

    times_descriptions.append('create_tmp_files')
    times.append(time.time())

    paper0 = j[0]
    title0 = texts[0]
    paper0['files_uploaded_to_VecML'] = files

    f = io.StringIO()
    with redirect_stdout(f):
        vecml.init(vecml_apikey() ,"us-west")

    times_descriptions.append('VecML init')
    times.append(time.time())

    vecml.create_chat(files[0], files)

    times_descriptions.append('VecML create chat')
    times.append(time.time())

    paper0['summary'] = chat_about_paper(files[0], 'Imagine I am a reviewer of this paper.  Please summarize "%s"' % (title0))

    times_descriptions.append('Summarize paper 0')
    times.append(time.time())

    i=1
    title = text = texts[i]
    paper = j[i]

    prompt = 'Imagine I am a reviewer of this paper.  Please summarize "%s"' % (title)
    paper['summary'] = chat_about_paper(files[0], prompt)

    times_descriptions.append('Summarize "%s"' % title)
    times.append(time.time())

    prompt = 'Imagine I am a reviewer of this paper.  What does "%s" have in common with "%s"?' % (title, title0)
    paper['similarities'] = chat_about_paper(files[0], prompt)

    times_descriptions.append('Similarities')
    times.append(time.time())
    
    prompt = 'Imagine I am a reviewer of this paper.  What distinguishes "%s" from "%s"?' % (title, title0)
    paper['differences'] = chat_about_paper(files[0], prompt)

    times_descriptions.append('Differences')
    times.append(time.time())

    paper0['times'] = { 'desc' : times_descriptions, 'times' : np.diff(np.array(times)).tolist()}
    vecml.delete_data(files[0])

j = documentation()
RAG_feature(j, [j['inputs']['text1'], j['inputs']['text2']])
print(json.dumps(j))

